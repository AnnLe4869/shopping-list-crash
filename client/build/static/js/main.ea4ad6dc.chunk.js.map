{"version":3,"sources":["components/AppNavBar.js","actions/actionCreator.js","actions/types.js","components/ItemModal.js","components/ShoppingList.js","App.js","reducers/itemReducer.js","reducers/loadingReducer.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["AppNavBar","Navbar","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","getItems","dispatch","a","async","axios","get","data","setItemsLoading","type","payload","ItemModal","useDispatch","useState","open","setOpen","item","setItem","handleToggle","Button","onClick","Modal","show","onHide","Header","closeButton","Title","Body","Form","onSubmit","e","preventDefault","name","post","Group","controlId","Label","Control","value","onChange","target","block","ShoppingList","items","useSelector","state","useEffect","handleRemoveItem","delete","Container","ListGroup","TransitionGroup","sort","b","date","map","_id","CSSTransition","timeout","classNames","key","Item","App","produce","draft","action","splice","length","push","index","findIndex","combineReducers","itemReducer","loading","loadingReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea4ad6dc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nexport default function AppNavBar() {\r\n  return (\r\n    <>\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#home\">Shopping List</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"/\">Home</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </>\r\n  );\r\n}\r\n","import { ADD_ITEM, GET_ITEMS, REMOVE_ITEM, ITEMS_LOADING } from \"./types\";\r\nimport axios from \"axios\";\r\n\r\nexport const getItems = () => {\r\n  return async dispatch => {\r\n    const { data } = await axios.get(`/api/items`);\r\n    dispatch(setItemsLoading());\r\n    return dispatch({ type: GET_ITEMS, payload: data });\r\n  };\r\n};\r\n\r\nexport const addItem = payload => {\r\n  return async dispatch => {\r\n    const { data } = await axios.post(`/api/items`, { name: payload.name });\r\n    dispatch(getItems());\r\n    return dispatch({\r\n      type: ADD_ITEM,\r\n      payload: data\r\n    });\r\n  };\r\n};\r\n\r\nexport const removeItem = payload => {\r\n  return async dispatch => {\r\n    const {\r\n      data: { id }\r\n    } = await axios.delete(`/api/items/${payload}`);\r\n    return dispatch({\r\n      type: REMOVE_ITEM,\r\n      payload: id\r\n    });\r\n  };\r\n};\r\n\r\nexport const setItemsLoading = () => ({\r\n  type: ITEMS_LOADING\r\n});\r\n","export const GET_ITEMS = \"GET_ITEMS\";\r\nexport const ADD_ITEM = \"ADD_ITEM\";\r\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\r\nexport const ITEMS_LOADING = \"ITEMS_LOADING\";\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\n\r\nimport { addItem } from \"../actions/actionCreator\";\r\n\r\nexport default function ItemModal() {\r\n  const dispatch = useDispatch();\r\n  const [open, setOpen] = useState(false);\r\n  const [item, setItem] = useState(\"\");\r\n\r\n  const handleToggle = () => setOpen(!open);\r\n  const handleChange = e => {\r\n    setItem(e.target.value);\r\n  };\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch(addItem({ name: item }));\r\n    setOpen(false);\r\n    setItem(\"\");\r\n  };\r\n  return (\r\n    <>\r\n      <Button variant=\"secondary\" className=\"my-3\" onClick={handleToggle}>\r\n        Add new item\r\n      </Button>\r\n\r\n      <Modal show={open} onHide={handleToggle}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add new item</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group controlId=\"item\">\r\n              <Form.Label>Item name</Form.Label>\r\n              <Form.Control type=\"text\" value={item} onChange={handleChange} />\r\n            </Form.Group>\r\n            <Button variant=\"primary\" block={true} type=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { ListGroup, Button, Container } from \"react-bootstrap\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { getItems, removeItem } from \"../actions/actionCreator\";\r\nimport ItemModal from \"./ItemModal\";\r\n\r\nexport default function ShoppingList() {\r\n  const dispatch = useDispatch();\r\n  const items = useSelector(state => state.items);\r\n\r\n  useEffect(() => {\r\n    dispatch(getItems());\r\n  }, []);\r\n\r\n  const handleRemoveItem = id => {\r\n    dispatch(removeItem(id));\r\n  };\r\n  return (\r\n    <>\r\n      <Container>\r\n        <ItemModal></ItemModal>\r\n        <ListGroup>\r\n          <TransitionGroup>\r\n            {[...items]\r\n              .sort((a, b) => (a.date < b.date ? 1 : -1))\r\n              .map(({ _id, name }) => (\r\n                <CSSTransition timeout={300} classNames=\"fade\" key={_id}>\r\n                  <ListGroup.Item>\r\n                    <Button\r\n                      variant=\"danger\"\r\n                      className=\"mr-3\"\r\n                      onClick={() => {\r\n                        handleRemoveItem(_id);\r\n                      }}\r\n                    >\r\n                      Remove\r\n                    </Button>\r\n                    {name}\r\n                  </ListGroup.Item>\r\n                </CSSTransition>\r\n              ))}\r\n          </TransitionGroup>\r\n        </ListGroup>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport \"./components/AppNavBar\";\r\nimport AppNavBar from \"./components/AppNavBar\";\r\nimport ShoppingList from \"./components/ShoppingList\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AppNavBar></AppNavBar>\r\n      <ShoppingList></ShoppingList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ADD_ITEM, GET_ITEMS, REMOVE_ITEM } from \"../actions/types\";\r\nimport { produce } from \"immer\";\r\n\r\nexport default produce((draft = [], action) => {\r\n  switch (action.type) {\r\n    case GET_ITEMS:\r\n      draft.splice(0, draft.length, ...action.payload);\r\n      return draft;\r\n    case ADD_ITEM:\r\n      draft.push(action.payload);\r\n      return draft;\r\n    case REMOVE_ITEM:\r\n      const index = draft.findIndex(item => {\r\n        return item._id === action.payload;\r\n      });\r\n      if (index > -1) {\r\n        draft.splice(index, 1);\r\n      }\r\n      return draft;\r\n\r\n    default:\r\n      return draft;\r\n  }\r\n});\r\n","import { ITEMS_LOADING } from \"../actions/types\";\r\nimport { produce } from \"immer\";\r\n\r\nexport default produce((draft = false, action) => {\r\n  switch (action.type) {\r\n    case ITEMS_LOADING:\r\n      draft = true;\r\n      return draft;\r\n\r\n    default:\r\n      return draft;\r\n  }\r\n});\r\n","import { combineReducers } from \"redux\";\r\nimport itemReducer from \"./itemReducer\";\r\nimport loadingReducer from \"./loadingReducer\";\r\n\r\nexport default combineReducers({ items: itemReducer, loading: loadingReducer });\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  rootReducer,\r\n  /* preloadedState */ composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}